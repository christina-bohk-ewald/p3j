/*
 * Copyright 2006 - 2012 Christina Bohk and Roland Ewald
 *  
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 *  
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License. 
 */
package p3j.simulation.assignments.plugintype;

import java.util.List;
import java.util.Map;

import org.jamesii.core.math.random.generators.IRandom;
import org.jamesii.core.util.misc.Pair;

import p3j.misc.errors.GeneratorError;
import p3j.pppm.IProjectionModel;
import p3j.pppm.parameters.ParameterAssignment;
import p3j.pppm.parameters.ParameterInstance;

/**
 * Interface for all PPPM simulators/analysers, which work on top of the
 * calculation component. There are different ways of analysing and simulating
 * this model, e.g. by Monte-Carlo simulation.
 * 
 * 
 * Created: August 17, 2008
 * 
 * @author Christina Bohk
 * @author Roland Ewald
 * 
 */
public interface IParamAssignmentGenerator {

	/**
	 * Initializes generator with the projection setup.
	 * 
	 * @param projection
	 *          the projection setup for which a valid (i.e., complete) parameter
	 *          assignment shall be generated.
	 */
	void init(IProjectionModel projection);

	/**
	 * This is the main execution method for PPPM simulators/analysers. mapping
	 * from each {@link ParameterInstance} defined in the
	 * {@link p3j.pppm.ProjectionModel} to one {@link ParameterAssignment} to be
	 * used in the calculation. Additionally, this method retrieves all
	 * {@link GeneratorError} objects, which is the error log of the assignment
	 * generation process.
	 * 
	 * 
	 * @param random
	 *          the random number generator to be used when stochastic approaches
	 *          are implemented
	 * @return tuple, first element is the mapping from each
	 *         {@link ParameterInstance} defined in the
	 *         {@link p3j.pppm.ProjectionModel} to one {@link ParameterAssignment}
	 *         to be used, the second element is the error log
	 */
	Pair<Map<ParameterInstance, ParameterAssignment>, List<GeneratorError>> chooseParamAssignments(
	    IRandom random);

	/**
	 * Retrieves number of possible parameter assignments that is left and can be
	 * generated by the assignment generator. If this returns 0, the execution
	 * will stop. Note that this is the <i>minimal</i> number, i.e. it may change
	 * dynamically over time and may even increase from one call to another.
	 * 
	 * @return minimum number of assignments that can be generated
	 */
	long assignmentsLeft();

}
